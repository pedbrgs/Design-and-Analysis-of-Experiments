data[,1]-data[,2]
data[,2]-data[,1]
dif <- mlp_mst - mlp
dif
shapiro.test(dif)
ks.test(dif)
ks.test(dif)
shapiro.test(rnorm(100, mean = 5, sd = 3))
help(shapiro.test)
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(dif)
dif
sort(dif)
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 1/analise_estatistica.R')
# Neural Networks (EEE950)
# Pedro Vinicius A. B. de Venancio
# Clear workspace
rm(list=ls())
# Clear all plots
graphics.off()
# Clear console
cat("\014")
mlp <- matrix(c(0.911, 0.9270, 0.8371, 0.6190, 0.9173), ncol = 1)
mlp_mst <- matrix(c(0.9343, 0.9347, 0.8428, 0.6212, 0.9384), ncol = 1)
dif <- mlp_mst - mlp
dif_sorted <- sort(dif)
shapiro.test(dif_sorted)
dif_sorted
shapiro.test(dif_sorted)
t.test(dif_sorted)
t.test(dif)
library(car)
install.packages(car)
install.packages('car')
durbin.watson
library(lmtest)
library('lmtest')
install.packages('lmtest')
install.packages('car')
update.packages(ask = FALSE)
install.packages('car')
install.packages('car', dependencies = TRUE)
log(rgamma(150,5))
OS_ELM
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/classification_evaluation.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/statistical_tests.R')
OS_ELM
colMeans(OS_ELM)
apply(OS_ELM, 2, sd)
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/statistical_tests.R')
KOS_ELM
dif <- OS_ELM_test - KOS_ELM_test
dif_sorted <- sort(dif)
shapiro.test(dif_sorted)
t.test(dif_sorted)
wilcox.test(OS_ELM_test, KOS_ELM_test, paired = T)
install.packages('lmtest')
# Import libraries
library('lmtest')
install.packages('car')
dwtest(OS_ELM_test ~ KOS_ELM_test)
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/statistical_tests.R')
dwtest(OS_ELM_test ~ KOS_ELM_test)
wilcox.test(OS_ELM_test, KOS_ELM_test, paired = T)
shapiro.test(dif_sorted)
shapiro.test(dif)
shapiro.test(dif)
OS_ELM_test
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/statistical_tests.R')
KOS_ELM <- (KOS_ELM - colMeans(KOS_ELM))/apply(KOS_ELM, 2, sd)
dif <- OS_ELM_test - KOS_ELM_test
dif_sorted <- sort(dif)
shapiro.test(dif_sorted)
t.test(dif_sorted)
dwtest(OS_ELM_test ~ KOS_ELM_test)
wilcox.test(OS_ELM_test, KOS_ELM_test, paired = T)
OS_ELM_test
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 2/statistical_tests.R')
# Clear workspace
rm(list=ls())
# Clear all plots
graphics.off()
# Clear console
cat("\014")
# Import libraries
library('lmtest')
OS_ELM_train <- c(0.7184, 0.0703, 0.0834)
OS_ELM_test <- matrix(c(0.6506, 0.0751, 0.0879), ncol = 1)
KOS_ELM_train <- c(0.6935, 0.0701, 0.0831)
KOS_ELM_test <- matrix(c(0.6798, 0.0734, 0.0862), ncol = 1)
OS_ELM <- cbind(OS_ELM_train, OS_ELM_test)
OS_ELM <- (OS_ELM - colMeans(OS_ELM))/apply(OS_ELM, 2, sd)
KOS_ELM <- cbind(KOS_ELM_train, KOS_ELM_test)
KOS_ELM <- (KOS_ELM - colMeans(KOS_ELM))/apply(KOS_ELM, 2, sd)
# Shapiro-Wilk test
dif <- OS_ELM_test - KOS_ELM_test
dif_sorted <- sort(dif)
shapiro.test(dif_sorted)
# Wilcoxon test
wilcox.test(OS_ELM_test, KOS_ELM_test, paired = T)
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
# Interesting case studies: set seed as 3, 7, 10, 19
set.seed(5
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
source('~/Dropbox/Mestrado/Disciplinas/Redes Neurais/Artigos/Artigo 3/gaussian.R')
clear
cls
clc
round(3.3)
floor(3.3)
floor(0.0031)
round(0.0031)
ceil(0.0031)
ceiling(0.0031)
trunc(0.0031)
ceil(0.0031, 3)
ceiling(0.333, 1)
help(ceiling)
round(x, digits = 3)
round(0.319238u1309, digits = 3)
round(0.319231309, digits = 3)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
install.packages("devtools")
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
install.packages(c("devtools", "GGally"))
install.packages(c("devtools", "GGally"))
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
unlink('report_template_cache', recursive = TRUE)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
unlink('report_template_cache', recursive = TRUE)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
install.packages("devtools")                    # you only have to install it once
library(devtools)
install_github("rstudio/rmarkdown")             # you only have to install it once
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
install.packages("devtools")                    # you only have to install it once
library(devtools)
install_github("rstudio/rmarkdown")             # you only have to install it once
install.packages("devtools")
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
data(mtcars)
fc<-c(2,8:11)
for (i in 1:length(fc)){mtcars[,fc[i]]<-as.factor(mtcars[,fc[i]])}
levels(mtcars$am) <- c("Automatic","Manual")
library(GGally,quietly = T, warn.conflicts = F) # This is just me getting fancy.
# There are much simpler ways ;-)
ggpairs(data=mtcars,columns=c(1,9),title="MPG by transmission type",
upper=list(combo="box"),lower=list(combo="facethist"),
diag=list(continuous="densityDiag",discrete="barDiag"))
model<-aov(mpg~am*disp,data=mtcars)
summary(model)
par(mfrow=c(2,2), mai=.3*c(1,1,1,1))
plot(model,pch=16,lty=1,lwd=2)
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
install.packages("devtools")                    # you only have to install it once
library(devtools)
install_github("rstudio/rmarkdown")             # you only have to install it once
load("~/Dropbox/Mestrado/Disciplinas/Planejamento e Análise de Experimentos/Design-and-Analysis-of-Experiments/Case Study 1/Instructions.pdf")
# A few initial definitions just to make sure all required packages are installed. Change as needed.
# NOTE: It may echo some weird messages to the PDF on the first compile (package installation messages). Run twice and the problem will (hopefully) go away.
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
install.packages("devtools")                    # you only have to install it once
library(devtools)
install_github("rstudio/rmarkdown")             # you only have to install it once
install.packages("devtools")
